
#user html;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    server_tokens off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_types text/css application/javascript application/json application/font-woff application/font-tff application/octet-stream;


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
server {
    listen 80;
    server_name {{ domain }};
    return  301 https://{{ domain }}$request_uri;
    location / {
	root	{{ docroot }};
        index   index.html index.htm;
    }
}
server {
    listen 443 default ssl http2;
    ssl on;
    ssl_certificate      /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/{{ domain }}/privkey.pem;

    server_name {{ domain }};
    location / {
        root    {{ docroot }};
        index   index.html index.htm;
    }

}

server {
    listen 80;
    server_name {{ domain1 }};
    return  301 https://{{ domain1 }}$request_uri;
    location / {
        root {{ docroot1 }};
	index	index.html index.htm;
    }
}
server {
    listen 443 ssl http2;
    server_name {{ domain1 }};   
    ssl on;
    ssl_certificate      /etc/letsencrypt/live/{{ domain1 }}/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/{{ domain1 }}/privkey.pem;

    location / {
        root    {{ docroot1 }};
        index   index.html index.htm;
    }
}


server {
    listen 80;
    server_name {{ domain2 }};
    return  301 https://{{ domain2 }}$request_uri;
    location / {
        root {{ docroot2 }};
	index	index.html index.htm;
    }
}
server {
    listen 443 ssl http2;
    server_name {{ domain2 }};
    ssl on;
    ssl_certificate      /etc/letsencrypt/live/{{ domain2 }}/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/{{ domain2 }}/privkey.pem;
    error_page  404              /404.html;

    location / {
        root    {{ docroot2 }};
        index   index.html index.htm;
    }
}


server {
    listen 80;
    server_name {{ domain3 }};
    return  301 https://{{ domain3 }}$request_uri;
    location / {
        root {{ docroot3 }};
	index	index.html index.htm;
    }
}
server {
    listen 443 ssl http2;
    server_name {{ domain3 }};
    ssl on;
    ssl_certificate      /etc/letsencrypt/live/{{ domain3 }}/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/{{ domain3 }}/privkey.pem;
    error_page  404              /404.html;

    location / {
        root    {{ docroot3 }};
        index   index.html index.htm;
    }
}


server {
    listen 80;
    server_name {{ transfer }};
    return  301 https://{{ transfer }}$request_uri;
    location / {
        root {{ docroot4 }};
	index	index.html index.htm;
    }
}
server {
    listen 443 ssl http2;
    server_name {{ transfer }};

    rewrite ^/2018/03/24/mycliが便利/$ https://{{ transfer }}/blog/posts/mycli/ permanent;
    rewrite ^/2017/03/08/ansible-の-handlers-で複数の処理がしたい/$ https://{{ transfer }}/blog/posts/ansible-handlers/ permanent;
    rewrite ^/2017/02/11/ansible-を快適にするコマンドを作る/$ https://{{ transfer }}/blog/posts/ansible/ permanent;
    rewrite ^/2017/02/09/systemd-nspawn-で-centos-と-debian-コンテナを作る/$ https://{{ transfer }}/blog/posts/systemd-nspawn-centos-debian/ permanent;
    rewrite ^/2017/01/24/github-のリポジトリを作って作業をはじめるコマンド/$ https://{{ transfer }}/blog/posts/github/ permanent;
    rewrite ^/2016/11/04/docker-ではなく-systemd-nspawn-で作る-web-開発環境/$ https://{{ transfer }}/blog/posts/docker-systemd-nspawn/ permanent;
    rewrite ^/2017/02/12/makefile-で-dotfiles-を作ろう/$ https://{{ transfer }}/blog/posts/dotfiles/ permanent;
    rewrite ^/2016/11/11/markdown-で全てのドキュメントを書くには/$ https://{{ transfer }}/blog/posts/markdown/ permanent;
    rewrite ^/2016/11/09/これだけ覚えておけばいい-arch-linux-のパッケージ管理/$ https://{{ transfer }}/blog/posts/pacman/ permanent;
    rewrite ^/2016/09/21/emacs25.1-の-tramp-が快適/$ https://{{ transfer }}/blog/posts/tramp/ permanent;
    rewrite ^/2016/11/07/linux-で新しいことをやる意欲を削がないために必要なこと/$ https://{{ transfer }}/blog/posts/linux/ permanent;
    rewrite ^(.*)$ https://{{ transfer }}/blog/ permanent;
    
    ssl on;
    ssl_certificate      /etc/letsencrypt/live/{{ transfer }}/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/{{ transfer }}/privkey.pem;
    error_page  404              /404.html;

    location / {
        root    {{ docroot4 }};
        index   index.html index.htm;
    }
}


include /etc/nginx/conf.d/*.conf;
}
